package net.viralpatel.servlet.filters;


import java.io.IOException;
import java.util.Date;
 
import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
 
public class LogFilter implements Filter {
 
    public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain) throws IOException, ServletException {
 
        final HttpServletRequest  request  = (HttpServletRequest)  req;
        final HttpServletResponse response = (HttpServletResponse) res;
        
        final String authHeader = request.getHeader("Authorization");
        
        System.out.println(authHeader);

        if ( (authHeader == null || !authHeader.startsWith("Bearer")) ) {
            
        	System.out.println("Missing or invalid Authorization header or Invalid Token.");
        	response.sendRedirect("/Servlet_Filter/Login.html");
        
        }else
        {
        	
        	String [] list_AutHeader = authHeader.split(" ");
        	
        	if( Utils.validateToken(list_AutHeader[1]))
        	{
        		
            	final String token = authHeader.substring(7);
            	
                //Get the IP address of client machine.
                String ipAddress   = request.getRemoteAddr();
                String queryString = request.getQueryString();
                 
                //Log the IP address and current timestamp.
                System.out.println("IP "+ipAddress + ", Time " + new Date().toString());
                 
                chain.doFilter(req, res);
        		
        	}else
        	{
        		 response.sendRedirect("/Servlet_Filter/Login.html");
        	}

        	
        }
        
         

        
    }
    public void init(FilterConfig config) throws ServletException {
         
        //Get init parameter
        String testParam = config.getInitParameter("test-param");
         
        //Print the init parameter
        System.out.println("Test Param: " + testParam);
    }
    public void destroy() {
        //add code to release any resource
    }
}